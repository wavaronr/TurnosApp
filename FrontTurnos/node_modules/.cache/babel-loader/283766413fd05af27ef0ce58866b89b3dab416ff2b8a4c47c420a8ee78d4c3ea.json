{"ast":null,"code":"var _jsxFileName = \"/home/user/calendario/src/context/CalendarContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { getColombianHolidays } from '../services/holidaysService';\nimport { getWeekDays } from '../components/getWeekDays';\n\n// 1. Crear el Contexto\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CalendarContext = /*#__PURE__*/createContext();\n\n// Hook personalizado para usar el contexto\nexport const useCalendar = () => {\n  _s();\n  return useContext(CalendarContext);\n};\n\n// 2. Crear el Proveedor del Contexto\n_s(useCalendar, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const CalendarProvider = ({\n  children\n}) => {\n  _s2();\n  const [yearSet, setYearSet] = useState(new Date().getFullYear());\n  const [colombianHolidays, setColombianHolidays] = useState([]);\n  const [selectedWeek, setSelectedWeek] = useState(null);\n\n  // NUEVO: Estado centralizado para todos los turnos\n  const [shifts, setShifts] = useState({}); // { 'YYYY-MM-DD': { morning: [], ... } }\n\n  useEffect(() => {\n    const fetchHolidays = async () => {\n      const holidays = await getColombianHolidays(yearSet);\n      setColombianHolidays(holidays);\n    };\n    fetchHolidays();\n  }, [yearSet]);\n\n  // --- LÓGICA DE NEGOCIO PARA TURNOS ---\n\n  const assignShift = (day, shiftType, person) => {\n    const dayString = day.toISOString().split('T')[0];\n\n    // Clonamos para no mutar el estado directamente\n    const newShifts = JSON.parse(JSON.stringify(shifts));\n    if (!newShifts[dayString]) {\n      newShifts[dayString] = {\n        morning: [],\n        afternoon: [],\n        night: [],\n        off: []\n      };\n    }\n\n    // Añadir persona al turno\n    newShifts[dayString][shiftType].push(person);\n    setShifts(newShifts);\n  };\n  const removeShift = (day, shiftType, personId) => {\n    const dayString = day.toISOString().split('T')[0];\n    const newShifts = JSON.parse(JSON.stringify(shifts));\n    if (newShifts[dayString] && newShifts[dayString][shiftType]) {\n      newShifts[dayString][shiftType] = newShifts[dayString][shiftType].filter(p => p.id !== personId);\n      setShifts(newShifts);\n    }\n  };\n  const getValidPeopleForShift = (day, shiftType, allPeople) => {\n    const dayString = day.toISOString().split('T')[0];\n    const weekDays = getWeekDays(selectedWeek, yearSet).map(d => d.toISOString().split('T')[0]);\n    return allPeople.filter(person => {\n      // REGLA 1: La persona no debe tener otro turno asignado este día.\n      const shiftsToday = shifts[dayString] || {};\n      for (const sType in shiftsToday) {\n        if (shiftsToday[sType].some(p => p.id === person.id)) {\n          return false; // Ya tiene un turno hoy\n        }\n      }\n\n      // REGLA 2: Si trabajó de noche ayer, hoy solo puede noche o libre.\n      const yesterday = new Date(day);\n      yesterday.setDate(day.getDate() - 1);\n      const yesterdayString = yesterday.toISOString().split('T')[0];\n      const shiftsYesterday = shifts[yesterdayString] || {};\n      if (shiftsYesterday.night && shiftsYesterday.night.some(p => p.id === person.id)) {\n        if (shiftType !== 'night' && shiftType !== 'off') {\n          return false; // Restricción noche-libre no cumplida\n        }\n      }\n\n      // REGLA 3: No más de 6 turnos de trabajo (no-libres) en la semana.\n      let workShiftCount = 0;\n      weekDays.forEach(weekDayString => {\n        const dayShifts = shifts[weekDayString] || {};\n        ['morning', 'afternoon', 'night'].forEach(workShiftType => {\n          if (dayShifts[workShiftType] && dayShifts[workShiftType].some(p => p.id === person.id)) {\n            workShiftCount++;\n          }\n        });\n      });\n      if (workShiftCount >= 6 && shiftType !== 'off') {\n        return false; // Excede los 6 días de trabajo\n      }\n      return true; // La persona es válida\n    });\n  };\n\n  // 3. Valor que se pasará a los componentes\n  const value = {\n    yearSet,\n    setYearSet,\n    colombianHolidays,\n    selectedWeek,\n    setSelectedWeek,\n    shifts,\n    // <- Estado de turnos\n    assignShift,\n    // <- Funciones de lógica\n    removeShift,\n    getValidPeopleForShift\n  };\n  return /*#__PURE__*/_jsxDEV(CalendarContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s2(CalendarProvider, \"J/EjtJGIR7m9TwbM1+yz2V468ZA=\");\n_c = CalendarProvider;\nvar _c;\n$RefreshReg$(_c, \"CalendarProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","getColombianHolidays","getWeekDays","jsxDEV","_jsxDEV","CalendarContext","useCalendar","_s","CalendarProvider","children","_s2","yearSet","setYearSet","Date","getFullYear","colombianHolidays","setColombianHolidays","selectedWeek","setSelectedWeek","shifts","setShifts","fetchHolidays","holidays","assignShift","day","shiftType","person","dayString","toISOString","split","newShifts","JSON","parse","stringify","morning","afternoon","night","off","push","removeShift","personId","filter","p","id","getValidPeopleForShift","allPeople","weekDays","map","d","shiftsToday","sType","some","yesterday","setDate","getDate","yesterdayString","shiftsYesterday","workShiftCount","forEach","weekDayString","dayShifts","workShiftType","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/user/calendario/src/context/CalendarContext.js"],"sourcesContent":["\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { getColombianHolidays } from '../services/holidaysService';\nimport { getWeekDays } from '../components/getWeekDays';\n\n// 1. Crear el Contexto\nexport const CalendarContext = createContext();\n\n// Hook personalizado para usar el contexto\nexport const useCalendar = () => {\n  return useContext(CalendarContext);\n};\n\n// 2. Crear el Proveedor del Contexto\nexport const CalendarProvider = ({ children }) => {\n  const [yearSet, setYearSet] = useState(new Date().getFullYear());\n  const [colombianHolidays, setColombianHolidays] = useState([]);\n  const [selectedWeek, setSelectedWeek] = useState(null);\n\n  // NUEVO: Estado centralizado para todos los turnos\n  const [shifts, setShifts] = useState({}); // { 'YYYY-MM-DD': { morning: [], ... } }\n\n  useEffect(() => {\n    const fetchHolidays = async () => {\n      const holidays = await getColombianHolidays(yearSet);\n      setColombianHolidays(holidays);\n    };\n    fetchHolidays();\n  }, [yearSet]);\n  \n  // --- LÓGICA DE NEGOCIO PARA TURNOS ---\n\n  const assignShift = (day, shiftType, person) => {\n    const dayString = day.toISOString().split('T')[0];\n    \n    // Clonamos para no mutar el estado directamente\n    const newShifts = JSON.parse(JSON.stringify(shifts));\n    if (!newShifts[dayString]) {\n      newShifts[dayString] = { morning: [], afternoon: [], night: [], off: [] };\n    }\n\n    // Añadir persona al turno\n    newShifts[dayString][shiftType].push(person);\n    setShifts(newShifts);\n  };\n\n  const removeShift = (day, shiftType, personId) => {\n    const dayString = day.toISOString().split('T')[0];\n    const newShifts = JSON.parse(JSON.stringify(shifts));\n\n    if (newShifts[dayString] && newShifts[dayString][shiftType]) {\n      newShifts[dayString][shiftType] = newShifts[dayString][shiftType].filter(p => p.id !== personId);\n      setShifts(newShifts);\n    }\n  };\n\n  const getValidPeopleForShift = (day, shiftType, allPeople) => {\n    const dayString = day.toISOString().split('T')[0];\n    const weekDays = getWeekDays(selectedWeek, yearSet).map(d => d.toISOString().split('T')[0]);\n\n    return allPeople.filter(person => {\n      // REGLA 1: La persona no debe tener otro turno asignado este día.\n      const shiftsToday = shifts[dayString] || {};\n      for (const sType in shiftsToday) {\n        if (shiftsToday[sType].some(p => p.id === person.id)) {\n          return false; // Ya tiene un turno hoy\n        }\n      }\n      \n      // REGLA 2: Si trabajó de noche ayer, hoy solo puede noche o libre.\n      const yesterday = new Date(day);\n      yesterday.setDate(day.getDate() - 1);\n      const yesterdayString = yesterday.toISOString().split('T')[0];\n      const shiftsYesterday = shifts[yesterdayString] || {};\n      if (shiftsYesterday.night && shiftsYesterday.night.some(p => p.id === person.id)) {\n        if (shiftType !== 'night' && shiftType !== 'off') {\n          return false; // Restricción noche-libre no cumplida\n        }\n      }\n\n      // REGLA 3: No más de 6 turnos de trabajo (no-libres) en la semana.\n      let workShiftCount = 0;\n      weekDays.forEach(weekDayString => {\n        const dayShifts = shifts[weekDayString] || {};\n        ['morning', 'afternoon', 'night'].forEach(workShiftType => {\n          if (dayShifts[workShiftType] && dayShifts[workShiftType].some(p => p.id === person.id)) {\n            workShiftCount++;\n          }\n        });\n      });\n\n      if (workShiftCount >= 6 && shiftType !== 'off') {\n        return false; // Excede los 6 días de trabajo\n      }\n\n      return true; // La persona es válida\n    });\n  };\n\n  // 3. Valor que se pasará a los componentes\n  const value = {\n    yearSet,\n    setYearSet,\n    colombianHolidays,\n    selectedWeek,\n    setSelectedWeek,\n    shifts, // <- Estado de turnos\n    assignShift, // <- Funciones de lógica\n    removeShift,\n    getValidPeopleForShift,\n  };\n\n  return (\n    <CalendarContext.Provider value={value}>\n      {children}\n    </CalendarContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}