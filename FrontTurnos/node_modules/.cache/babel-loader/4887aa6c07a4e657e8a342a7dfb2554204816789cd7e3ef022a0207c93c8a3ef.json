{"ast":null,"code":"import { create } from 'zustand';\nimport { fetchAllInitialData } from '../services/dataService';\n\n// ====================================================================\n// === CALENDAR STORE: The Single Source of Truth for Shift Data ===\n// ====================================================================\n\nconst useCalendarStore = create((set, get) => ({\n  // ====================================================================\n  // === 1. STATE (the data) ===\n  // ====================================================================\n  schedule: {},\n  people: [],\n  holidays: [],\n  isLoading: true,\n  error: null,\n  // ====================================================================\n  // === 2. ACTIONS (the functions to update the state) ===\n  // ====================================================================\n\n  /**\n   * Fetches all initial data using the dataService.\n   * This action is now async and handles the full loading/error cycle.\n   */\n  fetchInitialData: async () => {\n    if (get().isLoading) return; // Prevent re-fetching if already loading\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      // The store now calls the service, abstracting the data source.\n      const {\n        schedule,\n        people,\n        holidays\n      } = await fetchAllInitialData();\n      set({\n        schedule,\n        people,\n        holidays,\n        isLoading: false\n      });\n    } catch (error) {\n      console.error(\"Store: Failed to fetch initial data:\", error);\n      set({\n        error: error.message,\n        isLoading: false\n      });\n    }\n  },\n  assignPersonToShift: (day, shift, person) => {\n    set(state => {\n      const newSchedule = JSON.parse(JSON.stringify(state.schedule));\n      if (!newSchedule[day]) newSchedule[day] = {\n        morning: [],\n        afternoon: [],\n        night: [],\n        off: []\n      };\n      if (!newSchedule[day][shift]) newSchedule[day][shift] = [];\n      if (!newSchedule[day][shift].some(p => p.id === person.id)) {\n        newSchedule[day][shift].push(person);\n      }\n      return {\n        schedule: newSchedule\n      };\n    });\n  },\n  removePersonFromShift: (day, shift, personId) => {\n    set(state => {\n      const newSchedule = JSON.parse(JSON.stringify(state.schedule));\n      if (newSchedule[day] && newSchedule[day][shift]) {\n        newSchedule[day][shift] = newSchedule[day][shift].filter(p => p.id !== personId);\n      }\n      return {\n        schedule: newSchedule\n      };\n    });\n  }\n}));\nexport default useCalendarStore;","map":{"version":3,"names":["create","fetchAllInitialData","useCalendarStore","set","get","schedule","people","holidays","isLoading","error","fetchInitialData","console","message","assignPersonToShift","day","shift","person","state","newSchedule","JSON","parse","stringify","morning","afternoon","night","off","some","p","id","push","removePersonFromShift","personId","filter"],"sources":["/home/user/calendario/src/store/calendarStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport { fetchAllInitialData } from '../services/dataService';\n\n// ====================================================================\n// === CALENDAR STORE: The Single Source of Truth for Shift Data ===\n// ====================================================================\n\nconst useCalendarStore = create((set, get) => ({\n  // ====================================================================\n  // === 1. STATE (the data) ===\n  // ====================================================================\n  schedule: {},\n  people: [],\n  holidays: [],\n  isLoading: true,\n  error: null,\n\n  // ====================================================================\n  // === 2. ACTIONS (the functions to update the state) ===\n  // ====================================================================\n\n  /**\n   * Fetches all initial data using the dataService.\n   * This action is now async and handles the full loading/error cycle.\n   */\n  fetchInitialData: async () => {\n    if (get().isLoading) return; // Prevent re-fetching if already loading\n    set({ isLoading: true, error: null });\n    try {\n      // The store now calls the service, abstracting the data source.\n      const { schedule, people, holidays } = await fetchAllInitialData();\n      set({ schedule, people, holidays, isLoading: false });\n    } catch (error) {\n      console.error(\"Store: Failed to fetch initial data:\", error);\n      set({ error: error.message, isLoading: false });\n    }\n  },\n\n  assignPersonToShift: (day, shift, person) => {\n    set(state => {\n      const newSchedule = JSON.parse(JSON.stringify(state.schedule));\n\n      if (!newSchedule[day]) newSchedule[day] = { morning: [], afternoon: [], night: [], off: [] };\n      if (!newSchedule[day][shift]) newSchedule[day][shift] = [];\n\n      if (!newSchedule[day][shift].some(p => p.id === person.id)) {\n        newSchedule[day][shift].push(person);\n      }\n\n      return { schedule: newSchedule };\n    });\n  },\n\n  removePersonFromShift: (day, shift, personId) => {\n    set(state => {\n      const newSchedule = JSON.parse(JSON.stringify(state.schedule));\n      \n      if (newSchedule[day] && newSchedule[day][shift]) {\n        newSchedule[day][shift] = newSchedule[day][shift].filter(p => p.id !== personId);\n      }\n\n      return { schedule: newSchedule };\n    });\n  },\n}));\n\nexport default useCalendarStore;\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,mBAAmB,QAAQ,yBAAyB;;AAE7D;AACA;AACA;;AAEA,MAAMC,gBAAgB,GAAGF,MAAM,CAAC,CAACG,GAAG,EAAEC,GAAG,MAAM;EAC7C;EACA;EACA;EACAC,QAAQ,EAAE,CAAC,CAAC;EACZC,MAAM,EAAE,EAAE;EACVC,QAAQ,EAAE,EAAE;EACZC,SAAS,EAAE,IAAI;EACfC,KAAK,EAAE,IAAI;EAEX;EACA;EACA;;EAEA;AACF;AACA;AACA;EACEC,gBAAgB,EAAE,MAAAA,CAAA,KAAY;IAC5B,IAAIN,GAAG,CAAC,CAAC,CAACI,SAAS,EAAE,OAAO,CAAC;IAC7BL,GAAG,CAAC;MAAEK,SAAS,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACrC,IAAI;MACF;MACA,MAAM;QAAEJ,QAAQ;QAAEC,MAAM;QAAEC;MAAS,CAAC,GAAG,MAAMN,mBAAmB,CAAC,CAAC;MAClEE,GAAG,CAAC;QAAEE,QAAQ;QAAEC,MAAM;QAAEC,QAAQ;QAAEC,SAAS,EAAE;MAAM,CAAC,CAAC;IACvD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdE,OAAO,CAACF,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5DN,GAAG,CAAC;QAAEM,KAAK,EAAEA,KAAK,CAACG,OAAO;QAAEJ,SAAS,EAAE;MAAM,CAAC,CAAC;IACjD;EACF,CAAC;EAEDK,mBAAmB,EAAEA,CAACC,GAAG,EAAEC,KAAK,EAAEC,MAAM,KAAK;IAC3Cb,GAAG,CAACc,KAAK,IAAI;MACX,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACJ,KAAK,CAACZ,QAAQ,CAAC,CAAC;MAE9D,IAAI,CAACa,WAAW,CAACJ,GAAG,CAAC,EAAEI,WAAW,CAACJ,GAAG,CAAC,GAAG;QAAEQ,OAAO,EAAE,EAAE;QAAEC,SAAS,EAAE,EAAE;QAAEC,KAAK,EAAE,EAAE;QAAEC,GAAG,EAAE;MAAG,CAAC;MAC5F,IAAI,CAACP,WAAW,CAACJ,GAAG,CAAC,CAACC,KAAK,CAAC,EAAEG,WAAW,CAACJ,GAAG,CAAC,CAACC,KAAK,CAAC,GAAG,EAAE;MAE1D,IAAI,CAACG,WAAW,CAACJ,GAAG,CAAC,CAACC,KAAK,CAAC,CAACW,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKZ,MAAM,CAACY,EAAE,CAAC,EAAE;QAC1DV,WAAW,CAACJ,GAAG,CAAC,CAACC,KAAK,CAAC,CAACc,IAAI,CAACb,MAAM,CAAC;MACtC;MAEA,OAAO;QAAEX,QAAQ,EAAEa;MAAY,CAAC;IAClC,CAAC,CAAC;EACJ,CAAC;EAEDY,qBAAqB,EAAEA,CAAChB,GAAG,EAAEC,KAAK,EAAEgB,QAAQ,KAAK;IAC/C5B,GAAG,CAACc,KAAK,IAAI;MACX,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACJ,KAAK,CAACZ,QAAQ,CAAC,CAAC;MAE9D,IAAIa,WAAW,CAACJ,GAAG,CAAC,IAAII,WAAW,CAACJ,GAAG,CAAC,CAACC,KAAK,CAAC,EAAE;QAC/CG,WAAW,CAACJ,GAAG,CAAC,CAACC,KAAK,CAAC,GAAGG,WAAW,CAACJ,GAAG,CAAC,CAACC,KAAK,CAAC,CAACiB,MAAM,CAACL,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKG,QAAQ,CAAC;MAClF;MAEA,OAAO;QAAE1B,QAAQ,EAAEa;MAAY,CAAC;IAClC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC,CAAC;AAEH,eAAehB,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}