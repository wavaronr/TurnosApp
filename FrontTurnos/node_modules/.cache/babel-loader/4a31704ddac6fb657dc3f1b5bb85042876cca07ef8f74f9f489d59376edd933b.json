{"ast":null,"code":"var _jsxFileName = \"/home/user/calendario/src/context/CalendarContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { getColombianHolidays } from '../services/holidaysService';\nimport { getWeekDays } from '../components/getWeekDays';\nimport peopleData from '../data/dataPerson.json'; // 1. Importar los datos del personal\n\n// Crear el Contexto\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CalendarContext = /*#__PURE__*/createContext();\n\n// Hook personalizado\nexport const useCalendar = () => {\n  _s();\n  return useContext(CalendarContext);\n};\n\n// Proveedor del Contexto\n_s(useCalendar, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const CalendarProvider = ({\n  children\n}) => {\n  _s2();\n  const [yearSet, setYearSet] = useState(new Date().getFullYear());\n  const [colombianHolidays, setColombianHolidays] = useState([]);\n  const [selectedWeek, setSelectedWeek] = useState(null);\n  const [shifts, setShifts] = useState({});\n\n  // --- ESTADO Y LÓGICA PARA GESTIÓN DE PERSONAL ---\n  const [people, setPeople] = useState([]);\n\n  // Cargar personal inicial del JSON\n  useEffect(() => {\n    setPeople(peopleData);\n  }, []); // Se ejecuta solo una vez al montar\n\n  // Función para añadir o actualizar una persona\n  const savePerson = personData => {\n    if (personData.id) {\n      setPeople(people.map(p => p.id === personData.id ? personData : p));\n    } else {\n      const newId = people.length > 0 ? Math.max(...people.map(p => p.id)) + 1 : 1;\n      setPeople([...people, {\n        ...personData,\n        id: newId\n      }]);\n    }\n  };\n\n  // Función para eliminar una persona\n  const deletePerson = personId => {\n    // TODO: Antes de eliminar, se deberían desasignar todos los turnos de esta persona.\n    setPeople(people.filter(p => p.id !== personId));\n  };\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    const fetchHolidays = async () => {\n      const holidays = await getColombianHolidays(yearSet);\n      setColombianHolidays(holidays);\n    };\n    fetchHolidays();\n  }, [yearSet]);\n\n  // --- LÓGICA DE NEGOCIO PARA TURNOS ---\n  const assignShift = (day, shiftType, person) => {\n    const dayString = day.toISOString().split('T')[0];\n    const newShifts = JSON.parse(JSON.stringify(shifts));\n    if (!newShifts[dayString]) {\n      newShifts[dayString] = {\n        morning: [],\n        afternoon: [],\n        night: [],\n        off: []\n      };\n    }\n    newShifts[dayString][shiftType].push(person);\n    setShifts(newShifts);\n  };\n  const removeShift = (day, shiftType, personId) => {\n    const dayString = day.toISOString().split('T')[0];\n    const newShifts = JSON.parse(JSON.stringify(shifts));\n    if (newShifts[dayString] && newShifts[dayString][shiftType]) {\n      newShifts[dayString][shiftType] = newShifts[dayString][shiftType].filter(p => p.id !== personId);\n      setShifts(newShifts);\n    }\n  };\n\n  // 2. Refactor: La función ahora usa el estado `people` del contexto.\n  const getValidPeopleForShift = (day, shiftType) => {\n    const dayString = day.toISOString().split('T')[0];\n    const weekDays = getWeekDays(selectedWeek, yearSet).map(d => d.toISOString().split('T')[0]);\n    return people.filter(person => {\n      var _shiftsYesterday$nigh;\n      const shiftsToday = shifts[dayString] || {};\n      for (const sType in shiftsToday) {\n        if (shiftsToday[sType].some(p => p.id === person.id)) return false;\n      }\n      const yesterday = new Date(day);\n      yesterday.setDate(day.getDate() - 1);\n      const yesterdayString = yesterday.toISOString().split('T')[0];\n      const shiftsYesterday = shifts[yesterdayString] || {};\n      if ((_shiftsYesterday$nigh = shiftsYesterday.night) !== null && _shiftsYesterday$nigh !== void 0 && _shiftsYesterday$nigh.some(p => p.id === person.id)) {\n        if (shiftType !== 'night' && shiftType !== 'off') return false;\n      }\n      let workShiftCount = 0;\n      weekDays.forEach(weekDayString => {\n        const dayShifts = shifts[weekDayString] || {};\n        ['morning', 'afternoon', 'night'].forEach(workShiftType => {\n          var _dayShifts$workShiftT;\n          if ((_dayShifts$workShiftT = dayShifts[workShiftType]) !== null && _dayShifts$workShiftT !== void 0 && _dayShifts$workShiftT.some(p => p.id === person.id)) workShiftCount++;\n        });\n      });\n      if (workShiftCount >= 6 && shiftType !== 'off') return false;\n      return true;\n    });\n  };\n\n  // 3. Exponer el nuevo estado y funciones\n  const value = {\n    yearSet,\n    setYearSet,\n    colombianHolidays,\n    selectedWeek,\n    setSelectedWeek,\n    shifts,\n    assignShift,\n    removeShift,\n    getValidPeopleForShift,\n    people,\n    // <- Lista de personal\n    savePerson,\n    // <- Función para guardar/actualizar\n    deletePerson // <- Función para eliminar\n  };\n  return /*#__PURE__*/_jsxDEV(CalendarContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s2(CalendarProvider, \"lLENEZVRlzLHz9/qoZYy3LPmwrw=\");\n_c = CalendarProvider;\nvar _c;\n$RefreshReg$(_c, \"CalendarProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","getColombianHolidays","getWeekDays","peopleData","jsxDEV","_jsxDEV","CalendarContext","useCalendar","_s","CalendarProvider","children","_s2","yearSet","setYearSet","Date","getFullYear","colombianHolidays","setColombianHolidays","selectedWeek","setSelectedWeek","shifts","setShifts","people","setPeople","savePerson","personData","id","map","p","newId","length","Math","max","deletePerson","personId","filter","fetchHolidays","holidays","assignShift","day","shiftType","person","dayString","toISOString","split","newShifts","JSON","parse","stringify","morning","afternoon","night","off","push","removeShift","getValidPeopleForShift","weekDays","d","_shiftsYesterday$nigh","shiftsToday","sType","some","yesterday","setDate","getDate","yesterdayString","shiftsYesterday","workShiftCount","forEach","weekDayString","dayShifts","workShiftType","_dayShifts$workShiftT","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/user/calendario/src/context/CalendarContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { getColombianHolidays } from '../services/holidaysService';\nimport { getWeekDays } from '../components/getWeekDays';\nimport peopleData from '../data/dataPerson.json'; // 1. Importar los datos del personal\n\n// Crear el Contexto\nexport const CalendarContext = createContext();\n\n// Hook personalizado\nexport const useCalendar = () => {\n  return useContext(CalendarContext);\n};\n\n// Proveedor del Contexto\nexport const CalendarProvider = ({ children }) => {\n  const [yearSet, setYearSet] = useState(new Date().getFullYear());\n  const [colombianHolidays, setColombianHolidays] = useState([]);\n  const [selectedWeek, setSelectedWeek] = useState(null);\n  const [shifts, setShifts] = useState({});\n\n  // --- ESTADO Y LÓGICA PARA GESTIÓN DE PERSONAL ---\n  const [people, setPeople] = useState([]);\n\n  // Cargar personal inicial del JSON\n  useEffect(() => {\n    setPeople(peopleData);\n  }, []); // Se ejecuta solo una vez al montar\n\n  // Función para añadir o actualizar una persona\n  const savePerson = (personData) => {\n    if (personData.id) {\n      setPeople(people.map(p => p.id === personData.id ? personData : p));\n    } else {\n      const newId = people.length > 0 ? Math.max(...people.map(p => p.id)) + 1 : 1;\n      setPeople([...people, { ...personData, id: newId }]);\n    }\n  };\n\n  // Función para eliminar una persona\n  const deletePerson = (personId) => {\n    // TODO: Antes de eliminar, se deberían desasignar todos los turnos de esta persona.\n    setPeople(people.filter(p => p.id !== personId));\n  };\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    const fetchHolidays = async () => {\n      const holidays = await getColombianHolidays(yearSet);\n      setColombianHolidays(holidays);\n    };\n    fetchHolidays();\n  }, [yearSet]);\n  \n  // --- LÓGICA DE NEGOCIO PARA TURNOS ---\n  const assignShift = (day, shiftType, person) => {\n    const dayString = day.toISOString().split('T')[0];\n    const newShifts = JSON.parse(JSON.stringify(shifts));\n    if (!newShifts[dayString]) {\n      newShifts[dayString] = { morning: [], afternoon: [], night: [], off: [] };\n    }\n    newShifts[dayString][shiftType].push(person);\n    setShifts(newShifts);\n  };\n\n  const removeShift = (day, shiftType, personId) => {\n    const dayString = day.toISOString().split('T')[0];\n    const newShifts = JSON.parse(JSON.stringify(shifts));\n    if (newShifts[dayString] && newShifts[dayString][shiftType]) {\n      newShifts[dayString][shiftType] = newShifts[dayString][shiftType].filter(p => p.id !== personId);\n      setShifts(newShifts);\n    }\n  };\n\n  // 2. Refactor: La función ahora usa el estado `people` del contexto.\n  const getValidPeopleForShift = (day, shiftType) => {\n    const dayString = day.toISOString().split('T')[0];\n    const weekDays = getWeekDays(selectedWeek, yearSet).map(d => d.toISOString().split('T')[0]);\n\n    return people.filter(person => {\n      const shiftsToday = shifts[dayString] || {};\n      for (const sType in shiftsToday) {\n        if (shiftsToday[sType].some(p => p.id === person.id)) return false;\n      }\n      \n      const yesterday = new Date(day);\n      yesterday.setDate(day.getDate() - 1);\n      const yesterdayString = yesterday.toISOString().split('T')[0];\n      const shiftsYesterday = shifts[yesterdayString] || {};\n      if (shiftsYesterday.night?.some(p => p.id === person.id)) {\n        if (shiftType !== 'night' && shiftType !== 'off') return false;\n      }\n\n      let workShiftCount = 0;\n      weekDays.forEach(weekDayString => {\n        const dayShifts = shifts[weekDayString] || {};\n        ['morning', 'afternoon', 'night'].forEach(workShiftType => {\n          if (dayShifts[workShiftType]?.some(p => p.id === person.id)) workShiftCount++;\n        });\n      });\n\n      if (workShiftCount >= 6 && shiftType !== 'off') return false;\n\n      return true;\n    });\n  };\n\n  // 3. Exponer el nuevo estado y funciones\n  const value = {\n    yearSet,\n    setYearSet,\n    colombianHolidays,\n    selectedWeek,\n    setSelectedWeek,\n    shifts,\n    assignShift,\n    removeShift,\n    getValidPeopleForShift,\n    people,      // <- Lista de personal\n    savePerson,  // <- Función para guardar/actualizar\n    deletePerson // <- Función para eliminar\n  };\n\n  return (\n    <CalendarContext.Provider value={value}>\n      {children}\n    </CalendarContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC7E,SAASC,oBAAoB,QAAQ,6BAA6B;AAClE,SAASC,WAAW,QAAQ,2BAA2B;AACvD,OAAOC,UAAU,MAAM,yBAAyB,CAAC,CAAC;;AAElD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,eAAe,gBAAGT,aAAa,CAAC,CAAC;;AAE9C;AACA,OAAO,MAAMU,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,OAAOR,UAAU,CAACM,eAAe,CAAC;AACpC,CAAC;;AAED;AAAAE,EAAA,CAJaD,WAAW;AAKxB,OAAO,MAAME,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAChD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAIgB,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC;EAChE,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACoB,YAAY,EAAEC,eAAe,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACsB,MAAM,EAAEC,SAAS,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAExC;EACA,MAAM,CAACwB,MAAM,EAAEC,SAAS,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACdwB,SAAS,CAACpB,UAAU,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,MAAMqB,UAAU,GAAIC,UAAU,IAAK;IACjC,IAAIA,UAAU,CAACC,EAAE,EAAE;MACjBH,SAAS,CAACD,MAAM,CAACK,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACF,EAAE,KAAKD,UAAU,CAACC,EAAE,GAAGD,UAAU,GAAGG,CAAC,CAAC,CAAC;IACrE,CAAC,MAAM;MACL,MAAMC,KAAK,GAAGP,MAAM,CAACQ,MAAM,GAAG,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGV,MAAM,CAACK,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACF,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;MAC5EH,SAAS,CAAC,CAAC,GAAGD,MAAM,EAAE;QAAE,GAAGG,UAAU;QAAEC,EAAE,EAAEG;MAAM,CAAC,CAAC,CAAC;IACtD;EACF,CAAC;;EAED;EACA,MAAMI,YAAY,GAAIC,QAAQ,IAAK;IACjC;IACAX,SAAS,CAACD,MAAM,CAACa,MAAM,CAACP,CAAC,IAAIA,CAAC,CAACF,EAAE,KAAKQ,QAAQ,CAAC,CAAC;EAClD,CAAC;EACD;;EAEAnC,SAAS,CAAC,MAAM;IACd,MAAMqC,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,MAAMC,QAAQ,GAAG,MAAMpC,oBAAoB,CAACW,OAAO,CAAC;MACpDK,oBAAoB,CAACoB,QAAQ,CAAC;IAChC,CAAC;IACDD,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACxB,OAAO,CAAC,CAAC;;EAEb;EACA,MAAM0B,WAAW,GAAGA,CAACC,GAAG,EAAEC,SAAS,EAAEC,MAAM,KAAK;IAC9C,MAAMC,SAAS,GAAGH,GAAG,CAACI,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACjD,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAC5B,MAAM,CAAC,CAAC;IACpD,IAAI,CAACyB,SAAS,CAACH,SAAS,CAAC,EAAE;MACzBG,SAAS,CAACH,SAAS,CAAC,GAAG;QAAEO,OAAO,EAAE,EAAE;QAAEC,SAAS,EAAE,EAAE;QAAEC,KAAK,EAAE,EAAE;QAAEC,GAAG,EAAE;MAAG,CAAC;IAC3E;IACAP,SAAS,CAACH,SAAS,CAAC,CAACF,SAAS,CAAC,CAACa,IAAI,CAACZ,MAAM,CAAC;IAC5CpB,SAAS,CAACwB,SAAS,CAAC;EACtB,CAAC;EAED,MAAMS,WAAW,GAAGA,CAACf,GAAG,EAAEC,SAAS,EAAEN,QAAQ,KAAK;IAChD,MAAMQ,SAAS,GAAGH,GAAG,CAACI,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACjD,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAC5B,MAAM,CAAC,CAAC;IACpD,IAAIyB,SAAS,CAACH,SAAS,CAAC,IAAIG,SAAS,CAACH,SAAS,CAAC,CAACF,SAAS,CAAC,EAAE;MAC3DK,SAAS,CAACH,SAAS,CAAC,CAACF,SAAS,CAAC,GAAGK,SAAS,CAACH,SAAS,CAAC,CAACF,SAAS,CAAC,CAACL,MAAM,CAACP,CAAC,IAAIA,CAAC,CAACF,EAAE,KAAKQ,QAAQ,CAAC;MAChGb,SAAS,CAACwB,SAAS,CAAC;IACtB;EACF,CAAC;;EAED;EACA,MAAMU,sBAAsB,GAAGA,CAAChB,GAAG,EAAEC,SAAS,KAAK;IACjD,MAAME,SAAS,GAAGH,GAAG,CAACI,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACjD,MAAMY,QAAQ,GAAGtD,WAAW,CAACgB,YAAY,EAAEN,OAAO,CAAC,CAACe,GAAG,CAAC8B,CAAC,IAAIA,CAAC,CAACd,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAE3F,OAAOtB,MAAM,CAACa,MAAM,CAACM,MAAM,IAAI;MAAA,IAAAiB,qBAAA;MAC7B,MAAMC,WAAW,GAAGvC,MAAM,CAACsB,SAAS,CAAC,IAAI,CAAC,CAAC;MAC3C,KAAK,MAAMkB,KAAK,IAAID,WAAW,EAAE;QAC/B,IAAIA,WAAW,CAACC,KAAK,CAAC,CAACC,IAAI,CAACjC,CAAC,IAAIA,CAAC,CAACF,EAAE,KAAKe,MAAM,CAACf,EAAE,CAAC,EAAE,OAAO,KAAK;MACpE;MAEA,MAAMoC,SAAS,GAAG,IAAIhD,IAAI,CAACyB,GAAG,CAAC;MAC/BuB,SAAS,CAACC,OAAO,CAACxB,GAAG,CAACyB,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;MACpC,MAAMC,eAAe,GAAGH,SAAS,CAACnB,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC7D,MAAMsB,eAAe,GAAG9C,MAAM,CAAC6C,eAAe,CAAC,IAAI,CAAC,CAAC;MACrD,KAAAP,qBAAA,GAAIQ,eAAe,CAACf,KAAK,cAAAO,qBAAA,eAArBA,qBAAA,CAAuBG,IAAI,CAACjC,CAAC,IAAIA,CAAC,CAACF,EAAE,KAAKe,MAAM,CAACf,EAAE,CAAC,EAAE;QACxD,IAAIc,SAAS,KAAK,OAAO,IAAIA,SAAS,KAAK,KAAK,EAAE,OAAO,KAAK;MAChE;MAEA,IAAI2B,cAAc,GAAG,CAAC;MACtBX,QAAQ,CAACY,OAAO,CAACC,aAAa,IAAI;QAChC,MAAMC,SAAS,GAAGlD,MAAM,CAACiD,aAAa,CAAC,IAAI,CAAC,CAAC;QAC7C,CAAC,SAAS,EAAE,WAAW,EAAE,OAAO,CAAC,CAACD,OAAO,CAACG,aAAa,IAAI;UAAA,IAAAC,qBAAA;UACzD,KAAAA,qBAAA,GAAIF,SAAS,CAACC,aAAa,CAAC,cAAAC,qBAAA,eAAxBA,qBAAA,CAA0BX,IAAI,CAACjC,CAAC,IAAIA,CAAC,CAACF,EAAE,KAAKe,MAAM,CAACf,EAAE,CAAC,EAAEyC,cAAc,EAAE;QAC/E,CAAC,CAAC;MACJ,CAAC,CAAC;MAEF,IAAIA,cAAc,IAAI,CAAC,IAAI3B,SAAS,KAAK,KAAK,EAAE,OAAO,KAAK;MAE5D,OAAO,IAAI;IACb,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMiC,KAAK,GAAG;IACZ7D,OAAO;IACPC,UAAU;IACVG,iBAAiB;IACjBE,YAAY;IACZC,eAAe;IACfC,MAAM;IACNkB,WAAW;IACXgB,WAAW;IACXC,sBAAsB;IACtBjC,MAAM;IAAO;IACbE,UAAU;IAAG;IACbS,YAAY,CAAC;EACf,CAAC;EAED,oBACE5B,OAAA,CAACC,eAAe,CAACoE,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA/D,QAAA,EACpCA;EAAQ;IAAAiE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACnE,GAAA,CAjHWF,gBAAgB;AAAAsE,EAAA,GAAhBtE,gBAAgB;AAAA,IAAAsE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}