{"ast":null,"code":"var _jsxFileName = \"/home/user/calendario/src/components/DayCard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext, useMemo } from 'react';\nimport '../css/WeekDetail.css';\nimport AssignPersonModal from './AssignPersonModal.js';\nimport useCalendarStore from '../store/calendarStore';\nimport { ProfileContext } from '../context/ProfileContext.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShiftSection = ({\n  title,\n  people,\n  onAdd,\n  onRemove,\n  profile\n}) => {\n  // ... (ShiftSection implementation remains the same)\n};\n_c = ShiftSection;\nfunction DayCard({\n  day,\n  weekDays\n}) {\n  _s();\n  // 1. SELECTIVE state subscription from Zustand store\n  const {\n    holidays,\n    schedule,\n    people\n  } = useCalendarStore(state => ({\n    holidays: state.holidays,\n    schedule: state.schedule,\n    people: state.people\n  }));\n\n  // Get actions separately. They don't cause re-renders.\n  const assignShift = useCalendarStore.getState().assignShift;\n  const removeShift = useCalendarStore.getState().removeShift;\n  const {\n    profile\n  } = useContext(ProfileContext);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedShift, setSelectedShift] = useState(null);\n  const [validPeople, setValidPeople] = useState([]);\n  const getDayString = d => d.toISOString().split('T')[0];\n  const dayString = getDayString(day);\n\n  // Memoize dayShifts to avoid re-calculating on every render\n  const dayShifts = useMemo(() => schedule[dayString] || {\n    morning: [],\n    afternoon: [],\n    night: [],\n    off: []\n  }, [schedule, dayString]);\n  const dayOfMonth = day.getDate();\n  const month = day.getMonth() + 1;\n  const isHoliday = useMemo(() => holidays.some(h => h.dia === dayOfMonth && h.mes === month), [holidays, dayOfMonth, month]);\n  const dayName = day.toLocaleDateString('es-ES', {\n    weekday: 'short'\n  });\n  const cardStyle = {\n    ...(isHoliday && {\n      backgroundColor: '#fdd'\n    }),\n    listStyle: 'none'\n  };\n  const dayNumberStyle = {\n    ...(isHoliday && {\n      color: 'red',\n      fontWeight: 'bold'\n    })\n  };\n  const getValidPeopleForShift = dateForValidation => {\n    const dateStr = getDayString(dateForValidation);\n    const shiftsOnDay = schedule[dateStr];\n    if (!shiftsOnDay) return people;\n    const assignedPeopleIds = new Set(Object.values(shiftsOnDay).flat().map(p => p.id));\n    return people.filter(p => !assignedPeopleIds.has(p.id));\n  };\n  const shiftTypes = [{\n    id: 'morning',\n    title: 'Mañana'\n  }, {\n    id: 'afternoon',\n    title: 'Tarde'\n  }, {\n    id: 'night',\n    title: 'Noche'\n  }, {\n    id: 'off',\n    title: 'Libre'\n  }];\n  const handleAddPerson = shiftType => {\n    const validPeopleForShift = getValidPeopleForShift(day);\n    setValidPeople(validPeopleForShift);\n    setSelectedShift(shiftType);\n    setIsModalOpen(true);\n  };\n  const handleAssignToDays = (person, selectedDays) => {\n    selectedDays.forEach(d => {\n      const dateString = getDayString(d);\n      assignShift(dateString, selectedShift, person.id);\n    });\n    setIsModalOpen(false);\n  };\n  const handleRemovePerson = (shiftType, personId) => {\n    removeShift(dayString, shiftType, personId);\n  };\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"day-card\",\n    style: cardStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"day-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"day-name\",\n        children: dayName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"day-number\",\n        style: dayNumberStyle,\n        children: dayOfMonth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shifts-container\",\n      children: shiftTypes.map(shift => /*#__PURE__*/_jsxDEV(ShiftSection, {\n        title: shift.title,\n        people: dayShifts[shift.id],\n        onAdd: () => handleAddPerson(shift.id),\n        onRemove: personId => handleRemovePerson(shift.id, personId),\n        profile: profile\n      }, shift.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(AssignPersonModal, {\n      people: validPeople,\n      onAssign: handleAssignToDays,\n      onClose: handleCloseModal,\n      initialDay: day,\n      weekDays: weekDays,\n      shiftType: selectedShift\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n\n// ShiftSection component needs to be included or imported if it's not in the same file\n_s(DayCard, \"RdCgLgE6iOPOwCOCMiaE3K2hEWc=\", false, function () {\n  return [useCalendarStore];\n});\n_c2 = DayCard;\nconst MemoizedShiftSection = /*#__PURE__*/React.memo(ShiftSection);\n_c3 = MemoizedShiftSection;\nexport default DayCard;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ShiftSection\");\n$RefreshReg$(_c2, \"DayCard\");\n$RefreshReg$(_c3, \"MemoizedShiftSection\");","map":{"version":3,"names":["React","useState","useContext","useMemo","AssignPersonModal","useCalendarStore","ProfileContext","jsxDEV","_jsxDEV","ShiftSection","title","people","onAdd","onRemove","profile","_c","DayCard","day","weekDays","_s","holidays","schedule","state","assignShift","getState","removeShift","isModalOpen","setIsModalOpen","selectedShift","setSelectedShift","validPeople","setValidPeople","getDayString","d","toISOString","split","dayString","dayShifts","morning","afternoon","night","off","dayOfMonth","getDate","month","getMonth","isHoliday","some","h","dia","mes","dayName","toLocaleDateString","weekday","cardStyle","backgroundColor","listStyle","dayNumberStyle","color","fontWeight","getValidPeopleForShift","dateForValidation","dateStr","shiftsOnDay","assignedPeopleIds","Set","Object","values","flat","map","p","id","filter","has","shiftTypes","handleAddPerson","shiftType","validPeopleForShift","handleAssignToDays","person","selectedDays","forEach","dateString","handleRemovePerson","personId","handleCloseModal","className","style","children","fileName","_jsxFileName","lineNumber","columnNumber","shift","onAssign","onClose","initialDay","_c2","MemoizedShiftSection","memo","_c3","$RefreshReg$"],"sources":["/home/user/calendario/src/components/DayCard.js"],"sourcesContent":["import React, { useState, useContext, useMemo } from 'react';\nimport '../css/WeekDetail.css';\nimport AssignPersonModal from './AssignPersonModal.js';\nimport useCalendarStore from '../store/calendarStore';\nimport { ProfileContext } from '../context/ProfileContext.js';\n\nconst ShiftSection = ({ title, people, onAdd, onRemove, profile }) => {\n  // ... (ShiftSection implementation remains the same)\n};\n\nfunction DayCard({ day, weekDays }) {\n  // 1. SELECTIVE state subscription from Zustand store\n  const { holidays, schedule, people } = useCalendarStore(state => ({\n    holidays: state.holidays,\n    schedule: state.schedule,\n    people: state.people,\n  }));\n\n  // Get actions separately. They don't cause re-renders.\n  const assignShift = useCalendarStore.getState().assignShift;\n  const removeShift = useCalendarStore.getState().removeShift;\n\n  const { profile } = useContext(ProfileContext);\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedShift, setSelectedShift] = useState(null);\n  const [validPeople, setValidPeople] = useState([]);\n\n  const getDayString = (d) => d.toISOString().split('T')[0];\n  const dayString = getDayString(day);\n\n  // Memoize dayShifts to avoid re-calculating on every render\n  const dayShifts = useMemo(() => \n    schedule[dayString] || { morning: [], afternoon: [], night: [], off: [] }, \n    [schedule, dayString]\n  );\n\n  const dayOfMonth = day.getDate();\n  const month = day.getMonth() + 1;\n  const isHoliday = useMemo(() => \n    holidays.some(h => h.dia === dayOfMonth && h.mes === month), \n    [holidays, dayOfMonth, month]\n  );\n  const dayName = day.toLocaleDateString('es-ES', { weekday: 'short' });\n\n  const cardStyle = { ...(isHoliday && { backgroundColor: '#fdd' }), listStyle: 'none' };\n  const dayNumberStyle = { ...(isHoliday && { color: 'red', fontWeight: 'bold' }) };\n\n  const getValidPeopleForShift = (dateForValidation) => {\n    const dateStr = getDayString(dateForValidation);\n    const shiftsOnDay = schedule[dateStr];\n    if (!shiftsOnDay) return people;\n\n    const assignedPeopleIds = new Set(Object.values(shiftsOnDay).flat().map(p => p.id));\n    return people.filter(p => !assignedPeopleIds.has(p.id));\n  };\n\n  const shiftTypes = [\n    { id: 'morning', title: 'Mañana' },\n    { id: 'afternoon', title: 'Tarde' },\n    { id: 'night', title: 'Noche' },\n    { id: 'off', title: 'Libre' },\n  ];\n\n  const handleAddPerson = (shiftType) => {\n    const validPeopleForShift = getValidPeopleForShift(day);\n    setValidPeople(validPeopleForShift);\n    setSelectedShift(shiftType);\n    setIsModalOpen(true);\n  };\n\n  const handleAssignToDays = (person, selectedDays) => {\n    selectedDays.forEach(d => {\n      const dateString = getDayString(d);\n      assignShift(dateString, selectedShift, person.id);\n    });\n    setIsModalOpen(false);\n  };\n  \n  const handleRemovePerson = (shiftType, personId) => {\n    removeShift(dayString, shiftType, personId);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <div className=\"day-card\" style={cardStyle}>\n      <div className=\"day-header\">\n        <div className=\"day-name\">{dayName}</div>\n        <div className=\"day-number\" style={dayNumberStyle}>{dayOfMonth}</div>\n      </div>\n      <div className=\"shifts-container\">\n        {shiftTypes.map((shift) => (\n          <ShiftSection\n            key={shift.id}\n            title={shift.title}\n            people={dayShifts[shift.id]}\n            onAdd={() => handleAddPerson(shift.id)}\n            onRemove={(personId) => handleRemovePerson(shift.id, personId)}\n            profile={profile}\n          />\n        ))}\n      </div>\n\n      {isModalOpen && (\n        <AssignPersonModal\n          people={validPeople}\n          onAssign={handleAssignToDays}\n          onClose={handleCloseModal}\n          initialDay={day}\n          weekDays={weekDays}\n          shiftType={selectedShift}\n        />\n      )}\n    </div>\n  );\n}\n\n// ShiftSection component needs to be included or imported if it's not in the same file\nconst MemoizedShiftSection = React.memo(ShiftSection);\n\nexport default DayCard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}