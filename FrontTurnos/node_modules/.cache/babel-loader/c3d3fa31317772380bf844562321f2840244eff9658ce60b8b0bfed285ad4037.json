{"ast":null,"code":"/**\n * @file dataService.js\n * @description Abstraction layer for data fetching.\n * This service is the single source for all application data. It isolates the\n * data fetching logic (currently from local JSONs, but could be a REST API,\n * GraphQL, etc.) from the rest of the application, especially from the state\n * management (Zustand store).\n */\n\nimport initialScheduleData from '../data/september-2025-schedule.json';\nimport initialPeopleData from '../data/dataPerson.json';\nimport { colombianHolidays } from '../utils/holidays.js';\n\n// A small utility to simulate network latency\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n/**\n * Fetches the schedule data.\n * @returns {Promise<object>} A promise that resolves to the schedule object.\n */\nexport const fetchScheduleData = async () => {\n  console.log(\"DataService: Fetching schedule data...\");\n  // Simulate an API call with a short delay\n  await sleep(250);\n  if (initialScheduleData && initialScheduleData.days) {\n    return initialScheduleData.days;\n  }\n  throw new Error(\"Schedule data is not in the expected format.\");\n};\n\n/**\n * Fetches the list of people.\n * @returns {Promise<Array<object>>} A promise that resolves to the array of people.\n */\nexport const fetchPeopleData = async () => {\n  console.log(\"DataService: Fetching people data...\");\n  await sleep(100); // Shorter delay for secondary data\n  if (Array.isArray(initialPeopleData)) {\n    return initialPeopleData;\n  }\n  throw new Error(\"People data is not in the expected format.\");\n};\n\n/**\n * Fetches the list of holidays.\n * @returns {Promise<Array<object>>} A promise that resolves to the array of holidays.\n */\nexport const fetchHolidaysData = async () => {\n  console.log(\"DataService: Fetching holidays data...\");\n  // No delay needed for static utility data\n  if (Array.isArray(colombianHolidays)) {\n    return colombianHolidays;\n  }\n  throw new Error(\"Holidays data is not in the expected format.\");\n};\n\n/**\n * A comprehensive function to fetch all initial data needed for the app.\n * This is useful to avoid multiple loading states in the UI.\n */\nexport const fetchAllInitialData = async () => {\n  console.log(\"DataService: Fetching all initial data...\");\n  set({\n    isLoading: true,\n    error: null\n  });\n  try {\n    // Promise.all allows fetching all data in parallel\n    const [schedule, people, holidays] = await Promise.all([fetchScheduleData(), fetchPeopleData(), fetchHolidaysData()]);\n    console.log(\"DataService: All data fetched successfully.\");\n    return {\n      schedule,\n      people,\n      holidays\n    };\n  } catch (error) {\n    console.error(\"DataService: Error fetching initial data:\", error);\n    throw new Error(\"Failed to load initial application data.\");\n  }\n};","map":{"version":3,"names":["initialScheduleData","initialPeopleData","colombianHolidays","sleep","ms","Promise","resolve","setTimeout","fetchScheduleData","console","log","days","Error","fetchPeopleData","Array","isArray","fetchHolidaysData","fetchAllInitialData","set","isLoading","error","schedule","people","holidays","all"],"sources":["/home/user/calendario/src/services/dataService.js"],"sourcesContent":["/**\n * @file dataService.js\n * @description Abstraction layer for data fetching.\n * This service is the single source for all application data. It isolates the\n * data fetching logic (currently from local JSONs, but could be a REST API,\n * GraphQL, etc.) from the rest of the application, especially from the state\n * management (Zustand store).\n */\n\nimport initialScheduleData from '../data/september-2025-schedule.json';\nimport initialPeopleData from '../data/dataPerson.json';\nimport { colombianHolidays } from '../utils/holidays.js';\n\n// A small utility to simulate network latency\nconst sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n/**\n * Fetches the schedule data.\n * @returns {Promise<object>} A promise that resolves to the schedule object.\n */\nexport const fetchScheduleData = async () => {\n  console.log(\"DataService: Fetching schedule data...\");\n  // Simulate an API call with a short delay\n  await sleep(250);\n  if (initialScheduleData && initialScheduleData.days) {\n    return initialScheduleData.days;\n  }\n  throw new Error(\"Schedule data is not in the expected format.\");\n};\n\n/**\n * Fetches the list of people.\n * @returns {Promise<Array<object>>} A promise that resolves to the array of people.\n */\nexport const fetchPeopleData = async () => {\n  console.log(\"DataService: Fetching people data...\");\n  await sleep(100); // Shorter delay for secondary data\n  if (Array.isArray(initialPeopleData)) {\n    return initialPeopleData;\n  }\n  throw new Error(\"People data is not in the expected format.\");\n};\n\n/**\n * Fetches the list of holidays.\n * @returns {Promise<Array<object>>} A promise that resolves to the array of holidays.\n */\nexport const fetchHolidaysData = async () => {\n  console.log(\"DataService: Fetching holidays data...\");\n  // No delay needed for static utility data\n  if (Array.isArray(colombianHolidays)) {\n    return colombianHolidays;\n  }\n  throw new Error(\"Holidays data is not in the expected format.\");\n};\n\n/**\n * A comprehensive function to fetch all initial data needed for the app.\n * This is useful to avoid multiple loading states in the UI.\n */\nexport const fetchAllInitialData = async () => {\n  console.log(\"DataService: Fetching all initial data...\");\n  set({ isLoading: true, error: null });\n  try {\n    // Promise.all allows fetching all data in parallel\n    const [schedule, people, holidays] = await Promise.all([\n      fetchScheduleData(),\n      fetchPeopleData(),\n      fetchHolidaysData(),\n    ]);\n    console.log(\"DataService: All data fetched successfully.\");\n    return { schedule, people, holidays };\n  } catch (error) {\n    console.error(\"DataService: Error fetching initial data:\", error);\n    throw new Error(\"Failed to load initial application data.\");\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,mBAAmB,MAAM,sCAAsC;AACtE,OAAOC,iBAAiB,MAAM,yBAAyB;AACvD,SAASC,iBAAiB,QAAQ,sBAAsB;;AAExD;AACA,MAAMC,KAAK,GAAIC,EAAE,IAAK,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC,CAAC;;AAErE;AACA;AACA;AACA;AACA,OAAO,MAAMI,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAC3CC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;EACrD;EACA,MAAMP,KAAK,CAAC,GAAG,CAAC;EAChB,IAAIH,mBAAmB,IAAIA,mBAAmB,CAACW,IAAI,EAAE;IACnD,OAAOX,mBAAmB,CAACW,IAAI;EACjC;EACA,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;AACjE,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzCJ,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;EACnD,MAAMP,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;EAClB,IAAIW,KAAK,CAACC,OAAO,CAACd,iBAAiB,CAAC,EAAE;IACpC,OAAOA,iBAAiB;EAC1B;EACA,MAAM,IAAIW,KAAK,CAAC,4CAA4C,CAAC;AAC/D,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMI,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAC3CP,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;EACrD;EACA,IAAII,KAAK,CAACC,OAAO,CAACb,iBAAiB,CAAC,EAAE;IACpC,OAAOA,iBAAiB;EAC1B;EACA,MAAM,IAAIU,KAAK,CAAC,8CAA8C,CAAC;AACjE,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMK,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC7CR,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;EACxDQ,GAAG,CAAC;IAAEC,SAAS,EAAE,IAAI;IAAEC,KAAK,EAAE;EAAK,CAAC,CAAC;EACrC,IAAI;IACF;IACA,MAAM,CAACC,QAAQ,EAAEC,MAAM,EAAEC,QAAQ,CAAC,GAAG,MAAMlB,OAAO,CAACmB,GAAG,CAAC,CACrDhB,iBAAiB,CAAC,CAAC,EACnBK,eAAe,CAAC,CAAC,EACjBG,iBAAiB,CAAC,CAAC,CACpB,CAAC;IACFP,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;IAC1D,OAAO;MAAEW,QAAQ;MAAEC,MAAM;MAAEC;IAAS,CAAC;EACvC,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdX,OAAO,CAACW,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;IACjE,MAAM,IAAIR,KAAK,CAAC,0CAA0C,CAAC;EAC7D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}