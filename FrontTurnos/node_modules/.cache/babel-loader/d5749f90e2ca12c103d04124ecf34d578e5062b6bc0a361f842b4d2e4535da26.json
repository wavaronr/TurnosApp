{"ast":null,"code":"/**\n * @file dataService.js\n * @description Abstraction layer for data fetching.\n */\n\nimport initialScheduleData from '../data/september-2025-schedule.json';\nimport initialPeopleData from '../data/dataPerson.json';\n// Correctly import the 'holidays' function from the utility.\nimport { holidays as fetchHolidaysFromAPI } from '../utils/holidays.js';\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n/**\n * Fetches the schedule data.\n * @returns {Promise<object>} The schedule object.\n */\nexport const fetchScheduleData = async () => {\n  console.log(\"DataService: Fetching schedule data...\");\n  await sleep(250);\n  if (initialScheduleData && initialScheduleData.days) {\n    return initialScheduleData.days;\n  }\n  throw new Error(\"Schedule data is not in the expected format.\");\n};\n\n/**\n * Fetches the list of people.\n * @returns {Promise<Array<object>>} The array of people.\n */\nexport const fetchPeopleData = async () => {\n  console.log(\"DataService: Fetching people data...\");\n  await sleep(100);\n  if (Array.isArray(initialPeopleData)) {\n    return initialPeopleData;\n  }\n  throw new Error(\"People data is not in the expected format.\");\n};\n\n/**\n * Fetches the list of holidays for a given year.\n * It now correctly calls the async function from holidays.js.\n * @returns {Promise<Array<object>>} The array of holidays.\n */\nexport const fetchHolidaysData = async () => {\n  console.log(\"DataService: Fetching holidays data from API...\");\n  // We need a year for the API call, let's stick to 2025 as per the data.\n  const holidays = await fetchHolidaysFromAPI(2025);\n  if (Array.isArray(holidays)) {\n    return holidays;\n  }\n  throw new Error(\"Holidays data could not be fetched or is not an array.\");\n};\n\n/**\n * Fetches all initial data needed for the app in parallel.\n */\nexport const fetchAllInitialData = async () => {\n  console.log(\"DataService: Fetching all initial data...\");\n  try {\n    // Removed the incorrect 'set' call from here.\n    const [schedule, people, holidays] = await Promise.all([fetchScheduleData(), fetchPeopleData(), fetchHolidaysData()]);\n    console.log(\"DataService: All data fetched successfully.\");\n    return {\n      schedule,\n      people,\n      holidays\n    };\n  } catch (error) {\n    console.error(\"DataService: Error fetching initial data:\", error);\n    // Re-throw the error so the store can catch it.\n    throw new Error(\"Failed to load initial application data.\");\n  }\n};","map":{"version":3,"names":["initialScheduleData","initialPeopleData","holidays","fetchHolidaysFromAPI","sleep","ms","Promise","resolve","setTimeout","fetchScheduleData","console","log","days","Error","fetchPeopleData","Array","isArray","fetchHolidaysData","fetchAllInitialData","schedule","people","all","error"],"sources":["/home/user/calendario/src/services/dataService.js"],"sourcesContent":["/**\n * @file dataService.js\n * @description Abstraction layer for data fetching.\n */\n\nimport initialScheduleData from '../data/september-2025-schedule.json';\nimport initialPeopleData from '../data/dataPerson.json';\n// Correctly import the 'holidays' function from the utility.\nimport { holidays as fetchHolidaysFromAPI } from '../utils/holidays.js';\n\nconst sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n/**\n * Fetches the schedule data.\n * @returns {Promise<object>} The schedule object.\n */\nexport const fetchScheduleData = async () => {\n  console.log(\"DataService: Fetching schedule data...\");\n  await sleep(250);\n  if (initialScheduleData && initialScheduleData.days) {\n    return initialScheduleData.days;\n  }\n  throw new Error(\"Schedule data is not in the expected format.\");\n};\n\n/**\n * Fetches the list of people.\n * @returns {Promise<Array<object>>} The array of people.\n */\nexport const fetchPeopleData = async () => {\n  console.log(\"DataService: Fetching people data...\");\n  await sleep(100);\n  if (Array.isArray(initialPeopleData)) {\n    return initialPeopleData;\n  }\n  throw new Error(\"People data is not in the expected format.\");\n};\n\n/**\n * Fetches the list of holidays for a given year.\n * It now correctly calls the async function from holidays.js.\n * @returns {Promise<Array<object>>} The array of holidays.\n */\nexport const fetchHolidaysData = async () => {\n  console.log(\"DataService: Fetching holidays data from API...\");\n  // We need a year for the API call, let's stick to 2025 as per the data.\n  const holidays = await fetchHolidaysFromAPI(2025);\n  if (Array.isArray(holidays)) {\n    return holidays;\n  }\n  throw new Error(\"Holidays data could not be fetched or is not an array.\");\n};\n\n/**\n * Fetches all initial data needed for the app in parallel.\n */\nexport const fetchAllInitialData = async () => {\n  console.log(\"DataService: Fetching all initial data...\");\n  try {\n    // Removed the incorrect 'set' call from here.\n    const [schedule, people, holidays] = await Promise.all([\n      fetchScheduleData(),\n      fetchPeopleData(),\n      fetchHolidaysData(),\n    ]);\n    console.log(\"DataService: All data fetched successfully.\");\n    return { schedule, people, holidays };\n  } catch (error) {\n    console.error(\"DataService: Error fetching initial data:\", error);\n    // Re-throw the error so the store can catch it.\n    throw new Error(\"Failed to load initial application data.\");\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAOA,mBAAmB,MAAM,sCAAsC;AACtE,OAAOC,iBAAiB,MAAM,yBAAyB;AACvD;AACA,SAASC,QAAQ,IAAIC,oBAAoB,QAAQ,sBAAsB;AAEvE,MAAMC,KAAK,GAAIC,EAAE,IAAK,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC,CAAC;;AAErE;AACA;AACA;AACA;AACA,OAAO,MAAMI,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAC3CC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;EACrD,MAAMP,KAAK,CAAC,GAAG,CAAC;EAChB,IAAIJ,mBAAmB,IAAIA,mBAAmB,CAACY,IAAI,EAAE;IACnD,OAAOZ,mBAAmB,CAACY,IAAI;EACjC;EACA,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;AACjE,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzCJ,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;EACnD,MAAMP,KAAK,CAAC,GAAG,CAAC;EAChB,IAAIW,KAAK,CAACC,OAAO,CAACf,iBAAiB,CAAC,EAAE;IACpC,OAAOA,iBAAiB;EAC1B;EACA,MAAM,IAAIY,KAAK,CAAC,4CAA4C,CAAC;AAC/D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAC3CP,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;EAC9D;EACA,MAAMT,QAAQ,GAAG,MAAMC,oBAAoB,CAAC,IAAI,CAAC;EACjD,IAAIY,KAAK,CAACC,OAAO,CAACd,QAAQ,CAAC,EAAE;IAC3B,OAAOA,QAAQ;EACjB;EACA,MAAM,IAAIW,KAAK,CAAC,wDAAwD,CAAC;AAC3E,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMK,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC7CR,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;EACxD,IAAI;IACF;IACA,MAAM,CAACQ,QAAQ,EAAEC,MAAM,EAAElB,QAAQ,CAAC,GAAG,MAAMI,OAAO,CAACe,GAAG,CAAC,CACrDZ,iBAAiB,CAAC,CAAC,EACnBK,eAAe,CAAC,CAAC,EACjBG,iBAAiB,CAAC,CAAC,CACpB,CAAC;IACFP,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;IAC1D,OAAO;MAAEQ,QAAQ;MAAEC,MAAM;MAAElB;IAAS,CAAC;EACvC,CAAC,CAAC,OAAOoB,KAAK,EAAE;IACdZ,OAAO,CAACY,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;IACjE;IACA,MAAM,IAAIT,KAAK,CAAC,0CAA0C,CAAC;EAC7D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}