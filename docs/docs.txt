# Análisis de la Aplicación FrontTurnos para Integración con Backend

Este documento resume la estructura de la aplicación de React "FrontTurnos" y proporciona un contexto para conectarla a un servicio de backend.

## 1. Estructura del Proyecto y Enrutamiento

La aplicación utiliza `react-router-dom` para la gestión de rutas. Las rutas se definen en `src/App.js` y se dividen en dos categorías:

-   **Rutas Públicas:**
    -   `/`
    -   `/login`
-   **Rutas Privadas:**
    -   `/home`
    -   `/calendario`
    -   `/programacion`
    -   `/perfiles`
    -   `/rutas`

El acceso a las rutas privadas está protegido por un componente `PrivateRoute`, lo que indica la existencia de un sistema de autenticación del lado del cliente.

## 2. Autenticación

-   Los componentes `PrivateRoute` y `PublicRoute` controlan el acceso a las diferentes secciones de la aplicación.
-   El componente `Login` (`src/components/Login.js`) es el punto de entrada para la autenticación de usuarios.
-   **Acción Requerida:** El endpoint de autenticación del backend deberá integrarse en el componente `Login` para validar las credenciales del usuario y obtener un token de autenticación. El estado de autenticación (por ejemplo, el token) deberá ser almacenado globalmente.

## 3. Gestión de Estado

La aplicación utiliza React Context para la gestión del estado global a través de dos proveedores principales definidos en `src/App.js`:

-   **`ProfileProvider` (`src/context/ProfileContext.js`):** Responsable de gestionar el estado relacionado con los perfiles de usuario.
-   **`CalendarProvider` (`src/context/CalendarContext.js`):** Responsable de gestionar el estado relacionado con los datos del calendario y los turnos.

**Acción Requerida:** Las llamadas a la API del backend para obtener y modificar datos de perfiles y calendario deberán centralizarse dentro de estos proveedores de contexto.

## 4. Obtención de Datos (Punto Clave de Integración)

-   El servicio `getDataPersons.js` (`src/services/getDataPersons.js`) es actualmente responsable de obtener los datos de las personas.
-   Este servicio realiza una solicitud `fetch` a una URL hardcodeada: `http://localhost:5000/people`. Esto indica que la aplicación está utilizando un servidor JSON local para simular una API.

**Acción Requerida:** Reemplazar la URL `http://localhost:5000/people` en `getDataPersons.js` y en cualquier otro servicio similar por la URL del endpoint correspondiente del backend. Es crucial crear un archivo de configuración de entorno (por ejemplo, `.env`) para almacenar la URL base de la API del backend en lugar de mantenerla hardcodeada en los archivos de servicio.

## 5. Backend Information

- **URL Base:** `http://localhost:5000`
- **Endpoint de Personas:** `/api/personas`

## Conclusión

La integración con el backend requerirá enfocarse en los siguientes puntos:

1.  **Autenticación:** Conectar el componente `Login` al endpoint de autenticación del backend.
2.  **Servicios de Datos:** Modificar los servicios de datos existentes (como `getDataPersons.js`) para que apunten a los endpoints del backend real.
3.  **Gestión de Estado:** Integrar las llamadas a la API dentro de los proveedores de contexto (`ProfileProvider` y `CalendarProvider`) para manejar el ciclo de vida de los datos (obtener, crear, actualizar, eliminar).
